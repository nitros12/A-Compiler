#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class WewBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re='{~(\\n|.)*~}',
        eol_comments_re='\\/\\/.*?$',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(WewBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class WewParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re='{~(\\n|.)*~}',
        eol_comments_re='\\/\\/.*?$',
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=WewBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(WewParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa

        def block0():
            self._decl_()
        self._positive_closure(block0)
        self._check_eof()

    @tatsumasu()
    def _base_type_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('u1')
                with self._option():
                    self._token('u2')
                with self._option():
                    self._token('u4')
                with self._option():
                    self._token('u8')
                with self._option():
                    self._token('s1')
                with self._option():
                    self._token('s2')
                with self._option():
                    self._token('s4')
                with self._option():
                    self._token('s8')
                self._error('no available options')
        self.name_last_node('t')
        self.ast._define(
            ['t'],
            []
        )

    @tatsumasu()
    def _ptr_type_(self):  # noqa
        self._token('*')
        self._type_()
        self.name_last_node('t')
        self.ast._define(
            ['t'],
            []
        )

    @tatsumasu()
    def _void_type_(self):  # noqa
        self._token('()')
        self.name_last_node('t')
        self.ast._define(
            ['t'],
            []
        )

    @tatsumasu()
    def _const_type_(self):  # noqa
        self._token('|')
        self._type_()
        self.name_last_node('t')
        self._token('|')
        self.ast._define(
            ['t'],
            []
        )

    @tatsumasu()
    def _array_type_(self):  # noqa
        self._token('[')
        self._type_()
        self.name_last_node('t')
        with self._optional():
            self._token('@')
            self._int_()
            self.name_last_node('s')
        self._token(']')
        self.ast._define(
            ['s', 't'],
            []
        )

    @tatsumasu()
    def _fun_type_args_pre_(self):  # noqa
        with self._group():
            self._type_()
            self.add_last_node_to_name('@')

            def block1():
                self._token(',')
                self._type_()
                self.add_last_node_to_name('@')
            self._closure(block1)

    @tatsumasu()
    def _fun_type_args_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('...')
                self.name_last_node('va')
            with self._option():
                self._fun_type_args_pre_()
                self.name_last_node('t')
                with self._optional():
                    self._token(',')
                    self._token('...')
                    self.name_last_node('va')
            with self._option():
                self._empty_closure()
            self._error('no available options')
        self.ast._define(
            ['t', 'va'],
            []
        )

    @tatsumasu()
    def _fun_type_(self):  # noqa
        self._token('(')
        with self._choice():
            with self._option():
                self._token('...')
                self.name_last_node('va')
            with self._option():
                self._fun_type_args_pre_()
                self.name_last_node('t')
                with self._optional():
                    self._token(',')
                    self._token('...')
                    self.name_last_node('va')
            with self._option():
                self._empty_closure()
            self._error('no available options')

        self._token(')')
        self._token('->')
        self._type_()
        self.name_last_node('r')
        self.ast._define(
            ['r', 't', 'va'],
            []
        )

    @tatsumasu()
    def _type_(self):  # noqa
        with self._choice():
            with self._option():
                self._base_type_()
            with self._option():
                self._ptr_type_()
            with self._option():
                self._array_type_()
            with self._option():
                self._const_type_()
            with self._option():
                self._fun_type_()
            with self._option():
                self._void_type_()
            with self._option():
                self._token('(')
                self._type_()
                self._token(')')
            self._error('no available options')

    @tatsumasu()
    def _statement_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._var_decl_()
                        with self._option():
                            self._return_stmt_()
                        with self._option():
                            self._asm_()
                        self._error('no available options')
                self._token(';')
            with self._option():
                self._scope_()
            with self._option():
                self._if_stmt_()
            with self._option():
                self._loop_stmt_()
            with self._option():
                self._expr_()
                self._token(';')
            self._error('no available options')

    @tatsumasu()
    def _scope_(self):  # noqa
        self._token('{')

        def block1():
            self._statement_()
        self._closure(block1)
        self.name_last_node('body')
        self._token('}')
        self.ast._define(
            ['body'],
            []
        )

    @tatsumasu()
    def _asm_instruction_(self):  # noqa
        self._name_()
        self.name_last_node('name')
        self._token(':')
        self._int_()
        self.name_last_node('size')

        def sep3():
            self._token(',')

        def block3():
            self._asm_expr_()
        self._gather(block3, sep3)
        self.name_last_node('params')
        self.ast._define(
            ['name', 'params', 'size'],
            []
        )

    @tatsumasu()
    def _asm_sub_expr_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('%')
                self._int_()
                self.name_last_node('index_register')
                self._token('@')
                self._int_()
                self.name_last_node('size')
            with self._option():
                self._token('#')
                self._int_()
                self.name_last_node('int_immediate')
                self._token('@')
                self._int_()
                self.name_last_node('size')
            with self._option():
                self._token('<')
                self._int_()
                self.name_last_node('expr_index')
                self._token('>')
            self._error('no available options')
        self.ast._define(
            ['expr_index', 'index_register', 'int_immediate', 'size'],
            []
        )

    @tatsumasu()
    def _asm_expr_(self):  # noqa
        with self._optional():
            self._token('*')
            self.name_last_node('deref')
            self._token('@')
            self._int_()
            self.name_last_node('dsize')
        with self._choice():
            with self._option():
                self._token('%')
                self._int_()
                self.name_last_node('index_register')
                self._token('@')
                self._int_()
                self.name_last_node('size')
            with self._option():
                self._token('#')
                self._int_()
                self.name_last_node('int_immediate')
                self._token('@')
                self._int_()
                self.name_last_node('size')
            with self._option():
                self._token('<')
                self._int_()
                self.name_last_node('expr_index')
                self._token('>')
            self._error('no available options')
        self.ast._define(
            ['deref', 'dsize', 'expr_index', 'index_register', 'int_immediate', 'size'],
            []
        )

    @tatsumasu()
    def _asm_(self):  # noqa
        self._token('_asm')
        self._token('[')

        def block1():
            self._asm_instruction_()
            self._token(';')
        self._closure(block1)
        self.name_last_node('body')
        self._token(']')
        with self._optional():
            self._token('{')

            def sep3():
                self._token(',')

            def block3():
                self._expr_()
            self._gather(block3, sep3)
            self.name_last_node('captures')
            self._token('}')
        self.ast._define(
            ['body', 'captures'],
            []
        )

    @tatsumasu()
    def _elif_(self):  # noqa
        self._token('elif')
        self._expr_()
        self.name_last_node('e')
        self._scope_()
        self.name_last_node('t')
        self.ast._define(
            ['e', 't'],
            []
        )

    @tatsumasu()
    def _if_stmt_(self):  # noqa
        self._token('if')
        self._cut()
        self._expr_()
        self.name_last_node('e')
        self._scope_()
        self.name_last_node('t')

        def block3():
            self._elif_()
        self._closure(block3)
        self.name_last_node('elf')
        with self._optional():
            self._token('else')
            self._scope_()
            self.name_last_node('f')
        self.ast._define(
            ['e', 'elf', 'f', 't'],
            []
        )

    @tatsumasu()
    def _loop_stmt_(self):  # noqa
        self._token('while')
        self._cut()
        self._expr_()
        self.name_last_node('e')
        self._scope_()
        self.name_last_node('t')
        self.ast._define(
            ['e', 't'],
            []
        )

    @tatsumasu()
    def _return_stmt_(self):  # noqa
        self._token('return')
        self._cut()
        with self._optional():
            self._expr_()
        self.name_last_node('e')
        self.ast._define(
            ['e'],
            []
        )

    @tatsumasu()
    def _fun_args_pre_(self):  # noqa
        with self._group():
            self._name_()
            self._token(':')
            self._type_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            with self._group():
                self._name_()
                self._token(':')
                self._type_()
            self.add_last_node_to_name('@')
        self._closure(block1)

    @tatsumasu()
    def _fun_args_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('...')
                self.name_last_node('va')
            with self._option():
                self._fun_args_pre_()
                self.name_last_node('params')
                with self._optional():
                    self._token(',')
                    self._token('...')
                    self.name_last_node('va')
            with self._option():
                self._empty_closure()
            self._error('no available options')
        self.ast._define(
            ['params', 'va'],
            []
        )

    @tatsumasu()
    def _fun_decl_(self):  # noqa
        self._token('fn')
        self._name_()
        self.name_last_node('name')
        self._token('(')
        with self._choice():
            with self._option():
                self._token('...')
                self.name_last_node('va')
            with self._option():
                self._fun_args_pre_()
                self.name_last_node('params')
                with self._optional():
                    self._token(',')
                    self._token('...')
                    self.name_last_node('va')
            with self._option():
                self._empty_closure()
            self._error('no available options')

        self._token(')')
        with self._optional():
            self._token('->')
            self._type_()
            self.name_last_node('r')
        self._token('{')

        def block7():
            self._statement_()
        self._closure(block7)
        self.name_last_node('body')
        self._token('}')
        self.ast._define(
            ['body', 'name', 'params', 'r', 'va'],
            []
        )

    @tatsumasu()
    def _optional_def_(self):  # noqa
        with self._choice():
            with self._option():
                self._token(':=')
                self._cut()
                self._expr_()
                self.name_last_node('val')
                self._constant('infer')
                self.name_last_node('typ')
            with self._option():
                self._token(':')
                self._type_()
                self.name_last_node('typ')
                with self._optional():
                    self._token('=')
                    self._expr_()
                    self.name_last_node('val')
            self._error('no available options')
        self.ast._define(
            ['typ', 'val'],
            []
        )

    @tatsumasu()
    def _var_decl_(self):  # noqa
        self._token('var')
        self._cut()
        self._name_()
        self.name_last_node('name')
        with self._choice():
            with self._option():
                self._token(':=')
                self._cut()
                self._expr_()
                self.name_last_node('val')
                self._constant('infer')
                self.name_last_node('typ')
            with self._option():
                self._token(':')
                self._type_()
                self.name_last_node('typ')
                with self._optional():
                    self._token('=')
                    self._expr_()
                    self.name_last_node('val')
            self._error('no available options')
        self.ast._define(
            ['name', 'typ', 'val'],
            []
        )

    @tatsumasu()
    def _mod_decl_(self):  # noqa
        self._token('mod')
        self._cut()
        self._name_()
        self.name_last_node('name')
        self._token('{')

        def block2():
            self._decl_()
        self._positive_closure(block2)
        self.name_last_node('body')
        self._token('}')
        self.ast._define(
            ['body', 'name'],
            []
        )

    @tatsumasu()
    def _decl_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._fun_decl_()
                with self._option():
                    self._var_decl_()
                with self._option():
                    self._mod_decl_()
                self._error('no available options')
        with self._optional():
            self._token(';')

    @tatsumasu()
    def _expr_(self):  # noqa
        with self._choice():
            with self._option():
                self._assign_expr_()
            with self._option():
                self._boolean_pre_()
            self._error('no available options')

    @tatsumasu()
    def _assign_expr_(self):  # noqa
        self._boolean_pre_()
        self.name_last_node('left')
        self._token('=')
        self.name_last_node('op')
        self._expr_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu()
    def _boolean_pre_(self):  # noqa
        with self._choice():
            with self._option():
                self._boolean_()
            with self._option():
                self._bitwise_pre_()
            self._error('no available options')

    @tatsumasu()
    def _boolean_(self):  # noqa
        self._bitwise_pre_()
        self.name_last_node('left')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('or')
                with self._option():
                    self._token('and')
                self._error('no available options')
        self.name_last_node('op')
        self._cut()
        self._boolean_pre_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu()
    def _bitwise_pre_(self):  # noqa
        with self._choice():
            with self._option():
                self._bitwise_()
            with self._option():
                self._equality_pre_()
            self._error('no available options')

    @tatsumasu()
    def _bitwise_(self):  # noqa
        self._equality_pre_()
        self.name_last_node('left')

        def block2():
            self._bitwise_rep_()
        self._positive_closure(block2)
        self.name_last_node('rest')
        self.ast._define(
            ['left', 'rest'],
            []
        )

    @tatsumasu()
    def _bitwise_rep_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('|')
                with self._option():
                    self._token('^')
                with self._option():
                    self._token('&')
                self._error('no available options')
        self.name_last_node('op')
        self._equality_pre_()
        self.name_last_node('right')
        self.ast._define(
            ['op', 'right'],
            []
        )

    @tatsumasu()
    def _equality_pre_(self):  # noqa
        with self._choice():
            with self._option():
                self._equality_()
            with self._option():
                self._relation_pre_()
            self._error('no available options')

    @tatsumasu()
    def _equality_(self):  # noqa
        self._relation_pre_()
        self.name_last_node('left')

        def block2():
            self._equality_rep_()
        self._positive_closure(block2)
        self.name_last_node('rest')
        self.ast._define(
            ['left', 'rest'],
            []
        )

    @tatsumasu()
    def _equality_rep_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('!=')
                with self._option():
                    self._token('==')
                self._error('no available options')
        self.name_last_node('op')
        self._relation_pre_()
        self.name_last_node('right')
        self.ast._define(
            ['op', 'right'],
            []
        )

    @tatsumasu()
    def _relation_pre_(self):  # noqa
        with self._choice():
            with self._option():
                self._relation_()
            with self._option():
                self._bitshift_pre_()
            self._error('no available options')

    @tatsumasu()
    def _relation_(self):  # noqa
        self._bitshift_pre_()
        self.name_last_node('left')

        def block2():
            self._relation_rep_()
        self._positive_closure(block2)
        self.name_last_node('rest')
        self.ast._define(
            ['left', 'rest'],
            []
        )

    @tatsumasu()
    def _relation_rep_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('>=')
                with self._option():
                    self._token('<')
                with self._option():
                    self._token('>')
                self._error('no available options')
        self.name_last_node('op')
        self._bitshift_pre_()
        self.name_last_node('right')
        self.ast._define(
            ['op', 'right'],
            []
        )

    @tatsumasu()
    def _bitshift_pre_(self):  # noqa
        with self._choice():
            with self._option():
                self._bitshift_()
            with self._option():
                self._additive_pre_()
            self._error('no available options')

    @tatsumasu()
    def _bitshift_(self):  # noqa
        self._additive_pre_()
        self.name_last_node('left')

        def block2():
            self._bitshift_rep_()
        self._positive_closure(block2)
        self.name_last_node('rest')
        self.ast._define(
            ['left', 'rest'],
            []
        )

    @tatsumasu()
    def _bitshift_rep_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('>>')
                with self._option():
                    self._token('<<')
                self._error('no available options')
        self.name_last_node('op')
        self._additive_pre_()
        self.name_last_node('right')
        self.ast._define(
            ['op', 'right'],
            []
        )

    @tatsumasu()
    def _additive_pre_(self):  # noqa
        with self._choice():
            with self._option():
                self._additive_()
            with self._option():
                self._multiply_pre_()
            self._error('no available options')

    @tatsumasu()
    def _additive_(self):  # noqa
        self._multiply_pre_()
        self.name_last_node('left')

        def block2():
            self._additive_rep_()
        self._positive_closure(block2)
        self.name_last_node('rest')
        self.ast._define(
            ['left', 'rest'],
            []
        )

    @tatsumasu()
    def _additive_rep_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('+')
                with self._option():
                    self._token('-')
                self._error('no available options')
        self.name_last_node('op')
        self._multiply_pre_()
        self.name_last_node('right')
        self.ast._define(
            ['op', 'right'],
            []
        )

    @tatsumasu()
    def _multiply_pre_(self):  # noqa
        with self._choice():
            with self._option():
                self._multiply_()
            with self._option():
                self._unop_pre_()
            self._error('no available options')

    @tatsumasu()
    def _multiply_(self):  # noqa
        self._unop_pre_()
        self.name_last_node('left')

        def block2():
            self._multiply_rep_()
        self._positive_closure(block2)
        self.name_last_node('rest')
        self.ast._define(
            ['left', 'rest'],
            []
        )

    @tatsumasu()
    def _multiply_rep_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('*')
                with self._option():
                    self._token('/')
                with self._option():
                    self._token('%')
                self._error('no available options')
        self.name_last_node('op')
        self._unop_pre_()
        self.name_last_node('right')
        self.ast._define(
            ['op', 'right'],
            []
        )

    @tatsumasu()
    def _unop_pre_(self):  # noqa
        with self._choice():
            with self._option():
                self._prefix_()
            with self._option():
                self._postop_()
            self._error('no available options')

    @tatsumasu()
    def _prefix_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('*')
                with self._option():
                    self._token('--')
                with self._option():
                    self._token('++')
                with self._option():
                    self._token('~')
                with self._option():
                    self._token('!')
                with self._option():
                    self._token('-')
                with self._option():
                    self._token('&')
                with self._option():
                    self._token('+')
                self._error('no available options')
        self.name_last_node('op')
        self._unop_pre_()
        self.name_last_node('right')
        self.ast._define(
            ['op', 'right'],
            []
        )

    @tatsumasu()
    def _postop_(self):  # noqa
        with self._choice():
            with self._option():
                self._postfix_()
            with self._option():
                self._singular_()
            self._error('no available options')

    @tatsumasu()
    def _postfixexpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')

                def sep1():
                    self._token(',')

                def block1():
                    self._expr_()
                self._gather(block1, sep1)
                self.name_last_node('args')
                self._token(')')
                self._constant('f')
                self.name_last_node('type')
            with self._option():
                self._token('[')
                self._cut()
                self._expr_()
                self.name_last_node('args')
                self._token(']')
                self._constant('b')
                self.name_last_node('type')
            with self._option():
                self._token('++')
                self.name_last_node('op')
                self._constant('d')
                self.name_last_node('type')
            with self._option():
                self._token('--')
                self.name_last_node('op')
                self._constant('d')
                self.name_last_node('type')
            with self._option():
                self._token(':::')
                self.name_last_node('op')
                self._cut()
                self._type_()
                self.name_last_node('t')
                self._constant('c')
                self.name_last_node('type')
            with self._option():
                self._token('::')
                self.name_last_node('op')
                self._cut()
                self._type_()
                self.name_last_node('t')
                self._constant('c')
                self.name_last_node('type')
            self._error('no available options')
        self.ast._define(
            ['args', 'op', 't', 'type'],
            []
        )

    @tatsumasu()
    def _postfix_(self):  # noqa
        self._singular_()
        self.name_last_node('left')

        def block2():
            self._postfixexpr_()
        self._closure(block2)
        self.name_last_node('exprs')
        self.ast._define(
            ['exprs', 'left'],
            []
        )

    @tatsumasu()
    def _singular_(self):  # noqa
        with self._choice():
            with self._option():
                self._sizeof_()
            with self._option():
                self._literal_()
            with self._option():
                self._identifier_()
            with self._option():
                self._subexpr_()
            self._error('no available options')

    @tatsumasu()
    def _subexpr_(self):  # noqa
        self._token('(')
        self._expr_()
        self.name_last_node('@')
        self._token(')')

    @tatsumasu()
    def _sizeof_(self):  # noqa
        self._token('sizeof')
        self._token('<')
        with self._group():
            with self._choice():
                with self._option():
                    self._type_()
                with self._option():
                    self._expr_()
                self._error('no available options')
        self.name_last_node('t')
        self._token('>')
        self.ast._define(
            ['t'],
            []
        )

    @tatsumasu()
    def _literal_(self):  # noqa
        with self._choice():
            with self._option():
                self._int_lit_()
            with self._option():
                self._str_()
            with self._option():
                self._chr_()
            with self._option():
                self._arr_lit_()
            self._error('no available options')

    @tatsumasu()
    def _arr_lit_(self):  # noqa
        self._token('{')

        def sep1():
            self._token(',')

        def block1():
            self._expr_()
        self._gather(block1, sep1)
        self.name_last_node('obj')
        self._token('}')
        self.ast._define(
            ['obj'],
            []
        )

    @tatsumasu()
    def _int_(self):  # noqa
        self._pattern(r'-?\d+')

    @tatsumasu()
    def _int_lit_(self):  # noqa
        with self._group():
            self._pattern(r'-?\d+')
        self.name_last_node('val')
        with self._optional():
            self._token('/')
            self._base_type_()
            self.name_last_node('type')
        self.ast._define(
            ['type', 'val'],
            []
        )

    @tatsumasu()
    def _str_(self):  # noqa
        self._pattern(r'"[^"]+"')
        self.name_last_node('str')
        self.ast._define(
            ['str'],
            []
        )

    @tatsumasu()
    def _chr_(self):  # noqa
        self._pattern(r"'\\?[^']'")
        self.name_last_node('chr')
        self.ast._define(
            ['chr'],
            []
        )

    @tatsumasu()
    def _name_(self):  # noqa
        self._pattern(r'[A-Za-z]\w*')

    @tatsumasu()
    def _identifier_(self):  # noqa
        with self._optional():
            self._token('..')
            self.name_last_node('r')

        def sep2():
            self._token('.')

        def block2():
            self._name_()
        self._positive_join(block2, sep2)
        self.name_last_node('i')
        self.ast._define(
            ['i', 'r'],
            []
        )


class WewSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def base_type(self, ast):  # noqa
        return ast

    def ptr_type(self, ast):  # noqa
        return ast

    def void_type(self, ast):  # noqa
        return ast

    def const_type(self, ast):  # noqa
        return ast

    def array_type(self, ast):  # noqa
        return ast

    def fun_type_args_pre(self, ast):  # noqa
        return ast

    def fun_type_args(self, ast):  # noqa
        return ast

    def fun_type(self, ast):  # noqa
        return ast

    def type(self, ast):  # noqa
        return ast

    def statement(self, ast):  # noqa
        return ast

    def scope(self, ast):  # noqa
        return ast

    def asm_instruction(self, ast):  # noqa
        return ast

    def asm_sub_expr(self, ast):  # noqa
        return ast

    def asm_expr(self, ast):  # noqa
        return ast

    def asm(self, ast):  # noqa
        return ast

    def elif_(self, ast):  # noqa
        return ast

    def if_stmt(self, ast):  # noqa
        return ast

    def loop_stmt(self, ast):  # noqa
        return ast

    def return_stmt(self, ast):  # noqa
        return ast

    def fun_args_pre(self, ast):  # noqa
        return ast

    def fun_args(self, ast):  # noqa
        return ast

    def fun_decl(self, ast):  # noqa
        return ast

    def optional_def(self, ast):  # noqa
        return ast

    def var_decl(self, ast):  # noqa
        return ast

    def mod_decl(self, ast):  # noqa
        return ast

    def decl(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def assign_expr(self, ast):  # noqa
        return ast

    def boolean_pre(self, ast):  # noqa
        return ast

    def boolean(self, ast):  # noqa
        return ast

    def bitwise_pre(self, ast):  # noqa
        return ast

    def bitwise(self, ast):  # noqa
        return ast

    def bitwise_rep(self, ast):  # noqa
        return ast

    def equality_pre(self, ast):  # noqa
        return ast

    def equality(self, ast):  # noqa
        return ast

    def equality_rep(self, ast):  # noqa
        return ast

    def relation_pre(self, ast):  # noqa
        return ast

    def relation(self, ast):  # noqa
        return ast

    def relation_rep(self, ast):  # noqa
        return ast

    def bitshift_pre(self, ast):  # noqa
        return ast

    def bitshift(self, ast):  # noqa
        return ast

    def bitshift_rep(self, ast):  # noqa
        return ast

    def additive_pre(self, ast):  # noqa
        return ast

    def additive(self, ast):  # noqa
        return ast

    def additive_rep(self, ast):  # noqa
        return ast

    def multiply_pre(self, ast):  # noqa
        return ast

    def multiply(self, ast):  # noqa
        return ast

    def multiply_rep(self, ast):  # noqa
        return ast

    def unop_pre(self, ast):  # noqa
        return ast

    def prefix(self, ast):  # noqa
        return ast

    def postop(self, ast):  # noqa
        return ast

    def postfixexpr(self, ast):  # noqa
        return ast

    def postfix(self, ast):  # noqa
        return ast

    def singular(self, ast):  # noqa
        return ast

    def subexpr(self, ast):  # noqa
        return ast

    def sizeof(self, ast):  # noqa
        return ast

    def literal(self, ast):  # noqa
        return ast

    def arr_lit(self, ast):  # noqa
        return ast

    def int(self, ast):  # noqa
        return ast

    def int_lit(self, ast):  # noqa
        return ast

    def str(self, ast):  # noqa
        return ast

    def chr(self, ast):  # noqa
        return ast

    def name(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast


def main(filename, start='start', **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = WewParser()
    return parser.parse(text, start=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, WewParser, name='Wew')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
