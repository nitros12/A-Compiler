mod std {
    fn putchar(c: u1) {
        _asm[ putc:1, <0>; ] {c};
    }

    fn putint_debug(a: s8) {
        _asm[ putint:8, <0>; ] {a};
    }

    fn error(msg: *u1) {
        putstr("ABORT: ");
        putstr(msg);
        putstr("\n");
        _asm[ halt:1 ;];
    }

    fn putstr(s: *u1) {
        while *s {
            putchar(*s++);
        }
    }

    fn println(s: *u1) {
        putstr(s);
        putchar('\n');
    }

    fn putint(i: s8) {
        var r: [u1@40];
        var z: u2 = 0;
        var inp := i;
        
        while i {
            r[z++] = '0' + +(i % 10);
            i = i / 10;
        }

        if inp < 0 {
            putchar('-');
        }

        while z-- {
            putchar(r[z]);
        }
    }

    mod printf_intern {
        fn decode_uint(s: **u1, stk: **u1) {
            ++(*s);
            var c := **s;
            var st := *stk;
            if c == '1' {
                st = st - sizeof<u1>;
                ..std.putint(*st::*u1);
            } elif c == '2' {
                st = st - sizeof<u2>;
                ..std.putint(*st::*u2);
            } elif c == '4' {
                st = st - sizeof<u4>;
                ..std.putint(*st::*u4);
            } elif c == '8' {
                st = st - sizeof<u8>;
                ..std.putint(*st::*u8);
            } else {
                ..std.error("invalid size argument to %u_, must be one of 1, 2, 4, 8");
            }
            *stk = st;
        }
        
        fn decode_int(s: **u1, stk: **u1) {
            ++(*s);
            var c := **s;
            var st := *stk;
            if c == '1' {
                st = st - sizeof<s1>;
                ..std.putint(*st::*s1);
            } elif c == '2' {
                st = st - sizeof<s2>;
                ..std.putint(*st::*s2);
            } elif c == '4' {
                st = st - sizeof<s4>;
                ..std.putint(*st::*s4);
            } elif c == '8' {
                st = st - sizeof<s8>;
                ..std.putint(*st::*s8);
            } else {
                ..std.error("invalid size argument to %d_, must be one of 1, 2, 4, 8");
            }
            *stk = st;
        }
    }

    fn printf(i: *u1, ...) {
        var ptr := var_args::*u1;
        while *i {
            if *i == '%' {
                i++;
                var b := *i;
                if b == 'c' {
                    var c := --(ptr::*u1);
                    putchar(*c);
                } elif b == 'u' {
                    printf_intern.decode_uint(&i, &ptr);
                } elif b == 'd' {
                    printf_intern.decode_int(&i, &ptr); 
                } elif b == 's' {
                    var s := --(ptr::**u1);
                    putstr(*s);
                } elif b == '%' {
                    putchar('%');
                } else { error("invalid format argument, must be one of %c, %d(n), %s, %%"); }
            } else {
                putchar(*i);
            }
            i++;
        }
    }
}
