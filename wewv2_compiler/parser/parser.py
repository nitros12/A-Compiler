#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class WewBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re='{~(\\n|.)*~}',
        eol_comments_re='\\/\\/.*?$',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(WewBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class WewParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re='{~(\\n|.)*~}',
        eol_comments_re='\\/\\/.*?$',
        ignorecase=None,
        left_recursion=True,
        parseinfo=False,
        keywords=None,
        namechars='',
        buffer_class=WewBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(WewParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa

        def block0():
            self._decl_()
            self._token(';')
        self._positive_closure(block0)
        self._check_eof()

    @tatsumasu()
    def _base_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('u2')
            with self._option():
                self._token('u4')
            with self._option():
                self._token('s2')
            with self._option():
                self._token('s4')
            self._error('no available options')

    @tatsumasu()
    def _ptr_type_(self):  # noqa
        self._token('*')
        self._type_()
        self.name_last_node('t')
        self.ast._define(
            ['t'],
            []
        )

    @tatsumasu()
    def _array_type_(self):  # noqa
        self._token('[')
        self._type_()
        self.name_last_node('t')
        self._token(']')
        with self._optional():
            self._token('@')
            self._int_()
            self.name_last_node('s')
        self.ast._define(
            ['s', 't'],
            []
        )

    @tatsumasu()
    def _fun_type_(self):  # noqa
        self._token('(')

        def sep1():
            self._token(',')

        def block1():
            self._type_()
        self._gather(block1, sep1)
        self.name_last_node('t')
        self._token(')')
        self._token('->')
        self._type_()
        self.name_last_node('r')
        self.ast._define(
            ['r', 't'],
            []
        )

    @tatsumasu()
    def _type_(self):  # noqa
        with self._choice():
            with self._option():
                self._base_type_()
            with self._option():
                self._ptr_type_()
            with self._option():
                self._array_type_()
            with self._option():
                self._fun_type_()
            with self._option():
                self._token('(')
                self._type_()
                self._token(')')
            self._error('no available options')

    @tatsumasu()
    def _fun_decl_(self):  # noqa
        self._token('fn')
        self._identifier_()
        self._fun_type_()
        self._token('>')
        self._token('{')

        def block0():
            self._expr_()
        self._positive_closure(block0)
        self._token('}')

    @tatsumasu()
    def _var_decl_(self):  # noqa
        self._token('var')
        self._identifier_()
        self._optional_def_()

    @tatsumasu()
    def _optional_def_(self):  # noqa
        with self._choice():
            with self._option():
                self._token(':')
                self._type_()
                with self._optional():
                    self._token('=')
                    self._expr_()
            with self._option():
                self._token(':=')
                self._expr_()
            self._error('no available options')

    @tatsumasu()
    def _decl_(self):  # noqa
        with self._choice():
            with self._option():
                self._fun_decl_()
            with self._option():
                self._var_decl_()
            self._error('no available options')

    @tatsumasu()
    def _expr_(self):  # noqa
        self._token('...')

    @tatsumasu()
    def _identifier_(self):  # noqa
        self._pattern(r'[A-Za-z]\w*')

    @tatsumasu()
    def _int_(self):  # noqa
        self._pattern(r'\d+')


class WewSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def base_type(self, ast):  # noqa
        return ast

    def ptr_type(self, ast):  # noqa
        return ast

    def array_type(self, ast):  # noqa
        return ast

    def fun_type(self, ast):  # noqa
        return ast

    def type(self, ast):  # noqa
        return ast

    def fun_decl(self, ast):  # noqa
        return ast

    def var_decl(self, ast):  # noqa
        return ast

    def optional_def(self, ast):  # noqa
        return ast

    def decl(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast

    def int(self, ast):  # noqa
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = WewParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, WewParser, name='Wew')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
