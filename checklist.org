#+AUTHOR: Ben Simms
#+EMAIL: ben@bensimms.moe
#+TITLE: Compiler Checklist

* Compiler Logic [3/6]
- [X] Type system
- [X] Function bodies
  + [X] Scopes
- [X] Flow Control
  + [X] Loops
  + [X] If statements
  + [X] Return Statement
- [-] Expressions
  + [X] Binary Expressions
    - [X] Addition/ subtraction
    - [X] Multiplication/ Division
    - [X] Bit shifts
    - [X] Comparison operators
    - [X] Short circuiting comparisons
    - [X] Bitwise operators
    - [X] Assignment operator 
  + [X] Unary expressions
    - [X] Prefix
      + [X] Prefix increment/ decrement
      + [X] Bitwise not
      + [X] Logical not
      + [X] Unary negate
      + [X] Unary positive
      + [X] Dereference
    - [X] Postfix
      + [X] Array indexing
        - [X] Pointer style
        - [X] Array style
      + [X] Postincrement / Decrement
      + [X] Reinterpret/ const cast
      + [X] Function calling
  + [-] Literals
    - [X] Integer literals
      + [X] Char Literals
    - [ ] Array literals
      + [ ] Multi-dimensional array literals
      + [ ] String Literals
        - [ ] Char array Literals  
  + [X] Identifiers
- [-] Variable declarations
  + [ ] Array initialiser
    - [ ] Multi dimension initialisers
  + [X] Inferred type
- [ ] Inline assembly (register substitutions, etc) 
    
* Code Generator
- [X] Register allocator
- [X] Place register stores before function body is run, place register restores afterwards
- [X] IR desugar
- [X] Assembler
  + [X] Handle placing immediates in memory and making references to them if too large to fit in an instruction
  + [X] LoadVar
  + [X] SaveVar
  + [X] Mov
  + [X] Unary
  + [X] Binary
  + [X] Compare
  + [X] SetCmp
  + [X] Push
  + [X] Pop
  + [X] Prelude
  + [X] Epilog
  + [X] Return 
  + [X] Call
  + [X] Jump
  + [X] JumpTarget
  + [X] Resize
  + [X] Spill
  + [X] Load
- [X] Data packer and reference resolver
- [X] Final binary emitter
  
*  Optimiser
- [ ] NOOP deleter (add x 0 y -> Mov x y, add x 0 x -> nop) etc
- [ ] Mov coelesce (Mov a b, mov b c -> Mov a c)
- [ ] Multiply by power of two -> bit shift
